/*!
 *
 *   Copyright (C) 2017-2019 HERE Europe B.V.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *   SPDX-License-Identifier: Apache-2.0
 *   License-Filename: LICENSE
 *
 *
 */

//////////////////////////////
// Has Setting
//////////////////////////////
@function breakpoint-has($setting) {
  @if map-has-key($breakpoint, $setting) {
    @return true;
  }
  @else {
    @return false;
  }
}

//////////////////////////////
// Get Settings
//////////////////////////////
@function breakpoint-get($setting) {
  @if breakpoint-has($setting) {
    @return map-get($breakpoint, $setting);
  }
  @else {
    @return map-get($Breakpoint-Settings, $setting);
  }
}

//////////////////////////////
// Set Settings
//////////////////////////////
@function breakpoint-set($setting, $value) {
  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {
    @warn "Words in Breakpoint settings should be separated by spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.";
  }
  $breakpoint: map-merge($breakpoint, ($setting: $value)) !global;
  @return true;
}

@mixin breakpoint-change($setting, $value) {
  $breakpoint-change: breakpoint-set($setting, $value);
}

@mixin breakpoint-set($setting, $value) {
  @include breakpoint-change($setting, $value);
}

@mixin bkpt-change($setting, $value) {
  @include breakpoint-change($setting, $value);
}
@mixin bkpt-set($setting, $value) {
  @include breakpoint-change($setting, $value);
}

//////////////////////////////
// Remove Setting
//////////////////////////////
@function breakpoint-reset($settings...) {
  @if length($settings) == 1 {
    $settings: nth($settings, 1);
  }

  @each $setting in $settings {
    $breakpoint: map-remove($breakpoint, $setting) !global;
  }
  @return true;
}

@mixin breakpoint-reset($settings...) {
  $breakpoint-reset: breakpoint-reset($settings);
}

@mixin bkpt-reset($settings...) {
  $breakpoint-reset: breakpoint-reset($settings);
}
