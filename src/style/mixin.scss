/*!
 *
 *   Copyright (C) 2017-2019 HERE Europe B.V.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *   SPDX-License-Identifier: Apache-2.0
 *   License-Filename: LICENSE
 *
 *
 */

@import 'vars.scss';
/*
  Usage: breakpoint(320px 768px)
  https://github.com/at-import/breakpoint
*/

@import 'breakpoint/breakpoint';

$min-hd: (min-width $hd);
$max-lg: ((max-width $lg) (max-height 750px));
$max-xlg: (($lg $xlg) (max-height 850px));
$max-xxlg: ($xlg $xxlg);
$max-md: (max-width $md);

@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  @return ($pxval / $baseFontSize) * 1rem;
}

@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}

@mixin bp($m) {
  @include breakpoint(map-get($mq, $m)) {
    @content;
  }
}

@mixin imagePadding($width, $height, $percentWidth: 100) {
  height: 0;
  padding-bottom: percentage($height / $width) * $percentWidth/100;
  display: block;
  position: relative;

  > img {
    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
  }
}

@mixin fill() {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

@mixin userSelect($value) {
  -webkit-user-select: $value;
  -khtml-user-select: $value;
  -moz-user-select: $value;
  -ms-user-select: $value;
  user-select: $value;
}

// Add all your common keyfames in common.scss
// See fadeIn in common.scss and .imgLoaded in ImageLoader/style.scss for an example
@mixin keyframe($animation_name, $isGlobal: false) {
  $browser_prefix: moz, webkit;

  @if $isGlobal {
    $animation_name: #{':global(' + $animation_name + ')'};
  }

  @each $prefix in $browser_prefix {
    -#{$prefix}-keyframes #{$animation_name} {
      @content;
    }
  }

  @keyframes #{$animation_name} {
    @content;
  }
}

@mixin animation(
  $animation_name,
  $duration,
  $animation_timing_function: linear,
  $delay: 0s,
  $animation_iteration_count: 1,
  $isGlobal: false,
  $fillmode: forwards,
  $direction: normal
) {
  @if $isGlobal {
    :global {
      @include prefix(
        (
          animation-name: $animation_name,
          animation-duration: $duration,
          animation-timing-function: $animation_timing_function,
          animation-delay: $delay,
          animation-iteration-count: $animation_iteration_count,
          animation-fill-mode: $fillmode,
          animation-direction: $direction,
        ),
        webkit moz
      );
    }
  } @else {
    @include prefix(
      (
        animation-name: $animation_name,
        animation-duration: $duration,
        animation-timing-function: $animation_timing_function,
        animation-delay: $delay,
        animation-iteration-count: $animation_iteration_count,
        animation-fill-mode: $fillmode,
        animation-direction: $direction,
      ),
      webkit moz
    );
  }
}

@mixin rippleFx($duration, $delay, $color) {
  opacity: 0;
  position: absolute;
  top: -10px;
  left: -10px;
  right: 0;
  bottom: 0;
  content: '';
  height: 100%;
  width: 100%;
  border: 10px solid $color;
  border-radius: 100%;

  @include animation(
    ripple,
    $duration,
    cubic-bezier(0.65, 0, 0.34, 1),
    $delay,
    4,
    true
  );
  z-index: -1;
}
